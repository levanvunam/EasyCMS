@using EzCMS.Entity.Core.Enums
@model int

<div id="grid-buttons" class="col-xs-12">
    @Html.Partial("Partials/_ExportButtonsExcludeExportAll", "User")
</div>
<div class="col-xs-12">
    <table id="user-grid-table"></table>
    <div id="user-grid-pager"></div>
</div>
<div class="clear"></div>

@{
    Script.Block(@<script type="text/javascript">

        // Delete user - user group mapping
        function deleteUsersUserGroupMapping(userId) {
            var data = { userId: userId, userGroupId: @Model };

            siteHelper.confirm('@T("UserUserGroup_Message_DeleteMappingConfirm")', function (ok) {
                if (ok) {
                    siteHelper.httpPost({
                        url: '@Url.Action("DeleteUserUserGroupMapping", "Users")',
                        data: data,
                        success: function (response) {
                            siteHelper.showMessage(response);
                            if (response.Success) {
                                jqGridHelper.reloadGrid(userGrid);
                            }
                        }
                    });
                }
            });
        }

        // Reset password for user
        function resetPassword(username) {
            siteHelper.confirm("@T("User_Message_ResetPasswordConfirm")", function (ok) {
                if (ok) {
                    var data = { username : username };
                    siteHelper.httpPost({
                        url: "@Url.Action("ForgotPassword", "Users")",
                        data: data,
                        success: function (response) {
                            siteHelper.showMessage(response);
                        }
                    });
                }
            });
        }

        /*
         * Setup grid
         */
        var $dirty = false;
        var userGrid = "#user-grid-table";
        var userGridPager = "#user-grid-pager";
        var userTab = "#users";
        var userGridSettings = $.parseJSON('@Html.Action("GetGridSettings", "Account", new { name = "User" })');
        var userExportUrl = "@Url.Action("Exports", "Users", new { userGroupId = Model })";

        $(function () {
            var gridOptions = {
                url: "@Url.Action("_AjaxBinding", "Users", new { userGroupId = Model })",
                colNames: ['', '@T("User_Field_Id")',
                    '@T("User_Field_Email")',
                    '@T("User_Field_Username")',
                    '@T("User_Field_FirstName")',
                    '@T("User_Field_LastName")',
                    '@T("User_Field_UserGroups")',
                    '@T("User_Field_Status")',
                    '@T("User_Field_IsSystemAdministrator")',
                    '@T("User_Field_IsRemoteAccount")',
                    '@T("User_Field_LoginTimes")',
                    '@LabelForTime(T("User_Field_LastLogin"))',
                    '@T("User_Field_Phone")',
                    '@T("User_Field_DateOfBirth")',
                    '@T("User_Field_Gender")',
                    '@T("User_Field_About")',
                    '@LabelForTime(T("User_Field_ReleaseLockDate"))',
                    '@LabelForTime(T("User_Field_LastPasswordChange"))',
                    '@T("User_Field_PasswordFailsCount")',
                    '@LabelForTime(T("User_Field_LastFailedLogin"))',
                    '@LabelForTime(T("User_Field_AccountExpiresDate"))',
                    '@T("User_Field_Address")',
                    '@T("User_Field_Facebook")',
                    '@T("User_Field_Twitter")',
                    '@T("User_Field_LinkedIn")',
                    '@T("User_Field_RecordOrder")',
                    '@LabelForTime(T("User_Field_Created"))',
                    '@T("User_Field_CreatedBy")',
                    '@LabelForTime(T("User_Field_LastUpdate"))',
                    '@T("User_Field_LastUpdateBy")'],
                colModel: [
                    {
                        name: 'Actions',
                        hidedlg: true,
                        width: 150,
                        fixed: true,
                        sortable: false,
                        search: false,
                        align: "center",
                        formatter: function(cellvalue, options, rowObject) {
                            var editIcon = "<a class='grid-action' href='@Url.Action("Edit", "Users")/" + options.rowId + "'><div class='ui-pg-div' title='@T("System_Text_Edit")'><span class='fa fa-edit'></span></div></a>";
                            var detailsIcon = "<a class='grid-action' href='@Url.Action("Details", "Users")/" + options.rowId + "'><div class='ui-pg-div' title='@T("System_Text_ViewDetails")'><span class='fa fa-search-plus'></span></div></a>";

                            // Delete users - user group mapping
                            var deleteRelationshipIcon = "<a class='grid-action' href='javascript:deleteUsersUserGroupMapping(" + options.rowId + ")'><div class='ui-pg-div' title='@T("UserUserGroup_Text_Delete")'><span class='fa fa-chain-broken'></span></div></a>";

                            // Delete user icon
                            var returnUrl = "@Url.Action("Details", new { id = Model })";
                            var deleteIcon = "<a class='grid-action' href='@Url.Action("Details", "Users")/" + options.rowId + "?action=delete&returnUrl=" + returnUrl + "'><div class='ui-pg-div'title='@T("System_Text_Delete")'><span class='fa fa-times red'></span></div></a>";

                            var username = rowObject.Username ? rowObject.Username : rowObject.Email;
                            var resetPasswordIcon = "<a class='grid-action' href='javascript:resetPassword(\"" + username + "\")'><div class='ui-pg-div' title='@T("User_Text_ResetPassword")'><span class='fa fa-envelope-o'></span></div></a>";

                            return editIcon + detailsIcon + deleteRelationshipIcon + deleteIcon + resetPasswordIcon;
                        }
                    },
                    { name: 'Id', index: 'Id', key: true, width: 60, fixed: true, align: 'center', sorttype: "int", searchoptions: { sopt: ['eq'] } },
                    { name: 'Email', index: 'Email', editrules: { email: true } },
                    { name: 'Username', index: 'Username' },
                    { name: 'FirstName', index: 'FirstName' },
                    { name: 'LastName', index: 'LastName' },
                    { name: 'UserGroups', index: 'UserGroups' },
                    {
                        name: 'Status',
                        index: 'Status',
                        align: 'center',
                        search: false,
                        formatter: function(cellvalue, options, rowObject) {
                            return jqGridHelper.styleLabel(cellvalue, '@((int)UserEnums.UserStatus.Active)', "Active", "Disabled");
                        }
                    },
                    {
                        name: 'IsSystemAdministrator',
                        index: 'IsSystemAdministrator',
                        align: "center",
                        editable: false,
                        hidden: @(CurrentUser.IsSystemAdministrator ? "false" : "true"),
                        formatter: function(cellvalue, options, rowObject) {
                            return jqGridHelper.styleLabel(cellvalue, true, "<i class='fa fa-check'></i>", "");
                        }
                    },
                    {
                        name: 'IsRemoteAccount',
                        index: 'IsRemoteAccount',
                        align: "center",
                        formatter: function(cellvalue, options, rowObject) {
                            return jqGridHelper.styleLabel(cellvalue, true, "<i class='fa fa-check'></i>", "");
                        }
                    },
                    {
                        name: 'LoginTimes',
                        index: 'LoginTimes',
                        align: "center",
                        editable: false,
                        formatter: function(cellvalue, options, rowObject) {
                            var loginHistoryUrl = "@Url.EmtpyRouteUrl("Details", "Users")/" + rowObject.Id + "#user-login-histories";
                            return jqGridHelper.formatLink(loginHistoryUrl, cellvalue);
                        }
                    },
                    {
                        name: 'LastLogin',
                        index: 'LastLogin',
                        sorttype: "datetime",
                        search: false,
                        formatter: function(cellValue, options, rowObject) {
                            if (rowObject.LastLoginId != null) {
                                var label = jqGridHelper.printLocalDateTimeFormat(cellValue);
                                var loginHistoryUrl = "@Url.Action("Details", "UserLoginHistories")/" + rowObject.LastLoginId;
                                
                                return jqGridHelper.formatLink(loginHistoryUrl, label);
                            }

                            return "";
                        }
                    },
                    { name: 'Phone', index: 'Phone', hidden: true },
                    { name: 'DateOfBirth', index: 'DateOfBirth', hidden: true, sorttype: "datetime", search: false, formatter: function(cellValue, options, rowObject) { return jqGridHelper.printLocalDateTimeFormat(cellValue); } },
                    {
                        name: 'Gender',
                        index: 'Gender',
                        align: 'center',
                        hidden: true,
                        formatter: function(cellvalue, options, rowObject) {
                            if (cellvalue == '@((int)UserEnums.Gender.Male)') {
                                return "<span class='label label-success'> Male </span>";
                            } else if (cellvalue == '@((int)UserEnums.Gender.Female)') {
                                return "<span class='label label-success'> Female </span>";
                            } else {
                                return "<span class='label'> None </span>";
                            }
                        }
                    },
                    { name: 'About', index: 'About', hidden: true },
                    { name: 'ReleaseLockDate', index: 'ReleaseLockDate', hidden: true, sorttype: "datetime", search: false, formatter: function(cellValue, options, rowObject) { return jqGridHelper.printLocalDateTimeFormat(cellValue); } },
                    { name: 'LastPasswordChange', index: 'LastPasswordChange', hidden: true, sorttype: "datetime", search: false, formatter: function(cellValue, options, rowObject) { return jqGridHelper.printLocalDateTimeFormat(cellValue); } },
                    { name: 'PasswordFailsCount', index: 'PasswordFailsCount', hidden: true },
                    { name: 'LastFailedLogin', index: 'LastFailedLogin', hidden: true, sorttype: "datetime", search: false, formatter: function(cellValue, options, rowObject) { return jqGridHelper.printLocalDateTimeFormat(cellValue); } },
                    { name: 'AccountExpiresDate', index: 'AccountExpiresDate', hidden: true, sorttype: "datetime", search: false, formatter: function(cellValue, options, rowObject) { return jqGridHelper.printLocalDateTimeFormat(cellValue); } },
                    { name: 'Address', index: 'Address', hidden: true },
                    { name: 'Facebook', index: 'Facebook', hidden: true },
                    { name: 'Twitter', index: 'Twitter', hidden: true },
                    { name: 'LinkedIn', index: 'LinkedIn', hidden: true },
                    { name: 'RecordOrder', index: 'Order', width: 70, fixed: true, align: "center", sorttype: "int", searchoptions: { sopt: ['eq'] }, hidden: true },
                    { name: 'Created', index: 'Created', hidden: true, sorttype: "datetime", search: false, formatter: function(cellValue, options, rowObject) { return jqGridHelper.printLocalDateTimeFormat(cellValue); } },
                    { name: 'CreatedBy', index: 'CreatedBy', hidden: true },
                    { name: 'LastUpdate', index: 'LastUpdate', sorttype: "datetime", search: false, formatter: function(cellValue, options, rowObject) { return jqGridHelper.printLocalDateTimeFormat(cellValue); } },
                    { name: 'LastUpdateBy', index: 'LastUpdateBy' }
                ],
                loadComplete: function(response) {
                    $("#tab-user").data("total", response.records).html(response.records);
                }
            };

            jqGridHelper.setupTabGrid(userGrid, userGridPager, gridOptions, userGridSettings, userTab, userExportUrl, "User");
        });
    </script>);
}

